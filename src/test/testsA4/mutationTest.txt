mem[5]=1 --> mem[6] := mem[4]
             mem[5] := 2;

mem[6] mod 1000 < 6 --> mem[5]:=1
                        eat;

mem[mem[3] + 10] mod 6 <= 3 --> right;

mem[8] mod 6 >= 3 --> left;

ahead[1] = 0 --> forward;

{ahead[1] != 1 and
 ahead[1] != 2} and
ahead[1] != 0-1 --> attack;

ahead[1] > 0 --> tag[1];

mem[4] > mem[3] * 100 and
mem[3] < (10 + mem[7])
    --> grow;

mem[4] > 1000 --> mem[7] := mem[7] + mem[5]
                  bud;


// 1  mem[5] = 1 --> mem[6] := mem[4] mem[5] := 2;

// 2  mem[5] = 1
// 3  mem[5]
// 4  5
// 5  1
// 6  mem[6] := mem[4] mem[5] := 2 
// 7  mem[6] := mem[4]
// 8  6
// 9  mem[4]
// 10  4
// 11  mem[5] := 2
// 12  5
// 13  2
// 14  mem[6] mod 1000 < 6 --> mem[5] := 1 eat;

// 15  mem[6] mod 1000 < 6
// 16  mem[6] mod 1000
// 17  mem[6]
// 18  6
// 19  1000
// 20  6
// 21  mem[5] := 1 eat
// 22  mem[5] := 1
// 23  5
// 24  1
// 25  eat
// 26  mem[mem[3] + 10] mod 6 <= 3 --> right;

// 27  mem[mem[3] + 10] mod 6 <= 3
// 28  mem[mem[3] + 10] mod 6
// 29  mem[mem[3] + 10]
// 30  mem[3] + 10
// 31  mem[3]
// 32  3
// 33  10
// 34  6
// 35  3
// 36  right
// 37  right
// 38  mem[8] mod 6 >= 3 --> left;

// 39  mem[8] mod 6 >= 3
// 40  mem[8] mod 6
// 41  mem[8]
// 42  8
// 43  6
// 44  3
// 45  left
// 46  left
// 47  ahead[1] = 0 --> forward;

// 48  ahead[1] = 0
// 49  ahead[1]
// 50  1
// 51  0
// 52  forward
// 53  forward
// 54  ahead[1] != 1 and ahead[1] != 2 and ahead[1] != 0 - 1 --> attack;

// 55  ahead[1] != 1 and ahead[1] != 2 and ahead[1] != 0 - 1
// 56  ahead[1] != 1 and ahead[1] != 2
// 57  ahead[1] != 1
// 58  ahead[1]
// 59  1
// 60  1
// 61  ahead[1] != 2
// 62  ahead[1]
// 63  1
// 64  2
// 65  ahead[1] != 0 - 1
// 66  ahead[1]
// 67  1
// 68  0 - 1
// 69  0
// 70  1
// 71  attack
// 72  attack
// 73  ahead[1] > 0 --> tag[1];

// 74  ahead[1] > 0
// 75  ahead[1]
// 76  1
// 77  0
// 78  tag[1]
// 79  tag[1]
// 80  1
// 81  mem[4] > mem[3] * 100 and mem[3] < (10 + mem[7]) --> grow;

// 82  mem[4] > mem[3] * 100 and mem[3] < (10 + mem[7])
// 83  mem[4] > mem[3] * 100
// 84  mem[4]
// 85  4
// 86  mem[3] * 100
// 87  mem[3]
// 88  3
// 89  100
// 90  mem[3] < (10 + mem[7])
// 91  mem[3]
// 92  3
// 93  (10 + mem[7])
// 94  10 + mem[7]
// 95  10
// 96  mem[7]
// 97  7
// 98  grow
// 99  grow
// 100  mem[4] > 1000 --> mem[7] := mem[7] + mem[5] bud;

// 101  mem[4] > 1000
// 102  mem[4]
// 103  4
// 104  1000
// 105  mem[7] := mem[7] + mem[5] bud
// 106  mem[7] := mem[7] + mem[5]
// 107  7
// 108  mem[7] + mem[5]
// 109  mem[7]
// 110  7
// 111  mem[5]
// 112  5
// 113  bud